# Descargar e instalar version ElemStatLearn_2015.6.26.2.tar.gz
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
install.packages('kernlab')
# Aplicar Kernel ACP
library(kernlab) # Instalar con install.packages('kernlab')
# Kernel ACP
setwd("~/repos/machinelearning-az/datasets/Part 9 - Dimensionality Reduction")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Aplicar Kernel ACP
library(kernlab) # Instalar con install.packages('kernlab')
kpca = kpca(~ ., data = training_set[, -3], kernel = 'rbfdot', features = 2)
training_set = as.data.frame(predict(kpca, training_set))
View(training_set)
testing_set = as.data.frame(predict(kpca, testing_set))
View(testing_set)
setwd("~/repos/machinelearning-az/datasets/Part 9 - Dimensionality Reduction")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Aplicar Kernel ACP
library(kernlab) # Instalar con install.packages('kernlab')
kpca = kpca(~ ., data = training_set[, -3], kernel = 'rbfdot', features = 2)
training_set_kpca = as.data.frame(predict(kpca, training_set))
training_set_kpca$Purchased = training_set$Purchased
testing_set_kpca = as.data.frame(predict(kpca, testing_set))
testing_set_kpca$Purchased = testing_set$Purchased
View(training_set)
View(training_set_kpca)
View(training_set)
# Kernel ACP
setwd("~/repos/machinelearning-az/datasets/Part 9 - Dimensionality Reduction")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Aplicar Kernel ACP
library(kernlab) # Instalar con install.packages('kernlab')
kpca = kpca(~ ., data = training_set[, -3], kernel = 'rbfdot', features = 2)
training_set_kpca = as.data.frame(predict(kpca, training_set))
training_set_kpca$Purchased = training_set$Purchased
testing_set_kpca = as.data.frame(predict(kpca, testing_set))
testing_set_kpca$Purchased = testing_set$Purchased
View(testing_set)
View(testing_set_kpca)
View(testing_set)
View(testing_set_kpca)
View(testing_set)
View(testing_set_kpca)
View(training_set)
View(training_set_kpca)
classifier = glm(formula = Purchased ~ .,
data = training_set_kpca,
family = binomial)
prob_pred = predict(classifier, type = 'response',
newdata = testing_set_kpca[, -3]) # Todo el dataset excluyendo la columna 3
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Crear la matriz de confusion
cm = table(testing_set_kpca[, 3], y_pred)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set_kpca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testing_set_kpca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# k-fold cross validation
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Prediccion de los resultados con el conjunto de Testing
y_pred = predict(classifier, newdata = testing_set[, -3]) # Todo el dataset excluyendo la columna 3
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
library(caret) # Instalar con install.packages('caret')
folds = createFolds(training_set$Purchased, k = 10)
return(accuracy)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[, -3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] +cm[2, 2])
return(accuracy)
})
View(cv)
View(folds)
View(training_set)
cv
mean(cv)
mean(as.numeric(cv)
mean(as.numeric(cv))
mean(as.numeric(cv))
mean(as.numeric(cv))
accuracy = mean(as.numeric(cv)) # Media de precisiones
accuracy_sd = sd(as.numeric(cv))
# XGBoost
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Codificar las variables Geography y Gender como factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, -11] = scale(training_set[, -11])
testing_set[, -11] = scale(testing_set[, -11])
# Crear la RNA
library(h2o) # Instalar con install.packages('h2o')
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
# Prediccion de los resultados con el conjunto de Testing
prob_pred = h2o.predict(classifier,
newdata = as.h2o(testing_set[, -11])) # Todo el dataset excluyendo la columna 11
y_pred = prob_pred > 0.5
y_pred = as.vector(y_pred)
# Crear la matriz de confusion
cm = table(testing_set[, 11], y_pred)
# Cerrar la sesion de H2O
h2o.shutdown()
prob_pred
install.packages('xgboost')
# XGBoost
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Codificar las variables Geography y Gender como factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar XGBoost al Conjunto de Entrenamiento
library(xgboost) # Instalar con install.packages('xgboost')
classifier = xgboost(data = as.matrix(training_set[, -11]),
label = training_set$Exited,
nrounds = 10)
View(dataset)
library(caret) # Instalar con install.packages('caret')
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[, -11]),
label = training_set$Exited,
nrounds = 10)
y_pred = predict(classifier, newdata = as.matrix(test_fold[, -11]))
y_pred = y_pred >= 0.5
cm = table(test_fold[, 11], y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] +cm[2, 2])
return(accuracy)
})
accuracy = mean(as.numeric(cv)) # Media de precisiones
accuracy_sd = sd(as.numeric(cv)) # Varianza de los resultados
# Grid Search
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Prediccion de los resultados con el conjunto de Testing
y_pred = predict(classifier, newdata = testing_set[, -3]) # Todo el dataset excluyendo la columna 3
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
library(caret) # Instalar con install.packages('caret')
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[, -3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] +cm[2, 2])
return(accuracy)
})
accuracy = mean(as.numeric(cv)) # Media de precisiones
accuracy_sd = sd(as.numeric(cv)) # Varianza de los resultados
classifier = train(form = Purchased ~.,
data = training_set,
method = 'svmRadial')
# Grid Search
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar las variable categorica Purchased
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Prediccion de los resultados con el conjunto de Testing
y_pred = predict(classifier, newdata = testing_set[, -3]) # Todo el dataset excluyendo la columna 3
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
library(caret) # Instalar con install.packages('caret')
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[, -3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] +cm[2, 2])
return(accuracy)
})
accuracy = mean(as.numeric(cv)) # Media de precisiones
accuracy_sd = sd(as.numeric(cv)) # Varianza de los resultados
# Grid Search
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Aplicar algoritmo de k-fold cross validation
library(caret) # Instalar con install.packages('caret')
# Aplicar Grid Search para encontrar los parametros optimos
classifier = train(form = Purchased ~.,
data = training_set,
method = 'svmRadial')
# Grid Search
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Prediccion de los resultados con el conjunto de Testing
y_pred = predict(classifier, newdata = testing_set[, -3]) # Todo el dataset excluyendo la columna 3
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
library(caret) # Instalar con install.packages('caret')
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[, -3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] +cm[2, 2])
return(accuracy)
})
accuracy = mean(as.numeric(cv)) # Media de precisiones
accuracy_sd = sd(as.numeric(cv)) # Varianza de los resultados
setwd("~/repos/machinelearning-az/datasets/Part 10 - Model Selection & Boosting")
# Importar el dataset
dataset = read.csv('data/Social_Network_Ads.csv')
dataset = dataset[, 3:5]
dataset$Purchased = factor(dataset$Purchased)
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools) # Instalar con install.packages('caTools')
set.seed(123) # Para que salgan los mismos resultados que en el curso
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# Hay que indicar las columnas donde hacer el escalado
training_set[, 1:2] = scale(training_set[, 1:2])
testing_set[, 1:2] = scale(testing_set[, 1:2])
# Ajustar el clasificador con el conjunto de entrenamiento
library(e1071) # Instalar con install.packages('e1071')
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Prediccion de los resultados con el conjunto de Testing
y_pred = predict(classifier, newdata = testing_set[, -3]) # Todo el dataset excluyendo la columna 3
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
library(caret) # Instalar con install.packages('caret')
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[, -3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] +cm[2, 2])
return(accuracy)
})
accuracy = mean(as.numeric(cv)) # Media de precisiones
accuracy_sd = sd(as.numeric(cv)) # Varianza de los resultados
# Aplicar Grid Search para encontrar los parametros optimos
classifier = train(form = Purchased ~.,
data = training_set,
method = 'svmRadial')
View(dataset)
classifier
classifier$bestTune
